using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeHaffman
{
        public class Node : IComparable<Node>
        {

        private int frequence;
        private int height;
        private char symbol;
        private Node left;
        private Node right;



        public Node(char symbol, int freq)
        {
            this.symbol = symbol;
            frequence = freq;
            height = 0;
            left = null;
            right = null;
        }
        public Node(Node l, Node r)
        {
            left = l;
            right = r;
            height++;
            frequence = l.frequence + r.frequence;
        }
        


        public char GetSymbol()
        {
            return symbol;
        }

        public void SetSymbol(char c)
        {
            symbol = c;
        }

        public int GetFrequence()
        {
            return frequence;
        }
        public Node GetLeft()
        {
            return left;
        }

        public Node GetRight()
        {
            return right;
        }


        public int CompareTo(Node node)
        {
            //сортируем по возрастанию частоты, высоты, символов соответственно
            if (this.frequence == node.frequence)
            {
                if (this.height == node.height)
                {
                    if (this.symbol == node.symbol)
                    {
                        return 0;
                    }
                    else
                    {
                        if (this.symbol > node.symbol)
                        {
                            return 1;
                        }
                        else
                        {
                            return -1;
                        }
                    }
                }
                else
                {
                    if (this.height > node.height)
                    {
                        return 1;
                    }
                    else
                    {
                        return -1;
                    }
                }
                
            }
            else
            {
                if (this.frequence > node.frequence)
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
        }

    }
    
}
